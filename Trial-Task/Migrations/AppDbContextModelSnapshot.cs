// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Trial_Task_DAL.Contexts;

namespace Trial_Task.Migrations
{
	[DbContext(typeof(AppDbContext))]
	partial class AppDbContextModelSnapshot : ModelSnapshot
	{
		protected override void BuildModel(ModelBuilder modelBuilder)
		{
#pragma warning disable 612, 618
			modelBuilder
				.HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
				.HasAnnotation("Relational:MaxIdentifierLength", 128)
				.HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
				{
					b.Property<Guid>("Id")
						.ValueGeneratedOnAdd();

					b.Property<string>("ConcurrencyStamp")
						.IsConcurrencyToken();

					b.Property<string>("Name")
						.HasMaxLength(256);

					b.Property<string>("NormalizedName")
						.HasMaxLength(256);

					b.HasKey("Id");

					b.HasIndex("NormalizedName")
						.IsUnique()
						.HasName("RoleNameIndex")
						.HasFilter("[NormalizedName] IS NOT NULL");

					b.ToTable("AspNetRoles");
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

					b.Property<string>("ClaimType");

					b.Property<string>("ClaimValue");

					b.Property<Guid>("RoleId");

					b.HasKey("Id");

					b.HasIndex("RoleId");

					b.ToTable("AspNetRoleClaims");
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

					b.Property<string>("ClaimType");

					b.Property<string>("ClaimValue");

					b.Property<Guid>("UserId");

					b.HasKey("Id");

					b.HasIndex("UserId");

					b.ToTable("AspNetUserClaims");
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
				{
					b.Property<string>("LoginProvider");

					b.Property<string>("ProviderKey");

					b.Property<string>("ProviderDisplayName");

					b.Property<Guid>("UserId");

					b.HasKey("LoginProvider", "ProviderKey");

					b.HasIndex("UserId");

					b.ToTable("AspNetUserLogins");
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
				{
					b.Property<Guid>("UserId");

					b.Property<Guid>("RoleId");

					b.HasKey("UserId", "RoleId");

					b.HasIndex("RoleId");

					b.ToTable("AspNetUserRoles");
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
				{
					b.Property<Guid>("UserId");

					b.Property<string>("LoginProvider");

					b.Property<string>("Name");

					b.Property<string>("Value");

					b.HasKey("UserId", "LoginProvider", "Name");

					b.ToTable("AspNetUserTokens");
				});

			modelBuilder.Entity("Trial_Task_Model.Models.Airfield", b =>
				{
					b.Property<Guid>("ID")
						.ValueGeneratedOnAdd();

					b.Property<double>("Latitude");

					b.Property<double>("Longitude");

					b.Property<string>("Name")
						.IsRequired()
						.HasMaxLength(60);

					b.HasKey("ID");

					b.ToTable("Airfields");

					b.HasData(
						new
						{
							ID = new Guid("11111111-0000-1111-1111-111111111111"),
							Latitude = 45.0,
							Longitude = 45.0,
							Name = "Airfield 1"
						},
						new
						{
							ID = new Guid("11111111-1111-1111-1111-111111111111"),
							Latitude = 44.0,
							Longitude = 44.0,
							Name = "Airfield 2"
						});
				});

			modelBuilder.Entity("Trial_Task_Model.Models.Flight", b =>
				{
					b.Property<Guid>("ID")
						.ValueGeneratedOnAdd();

					b.Property<DateTime>("Date");

					b.Property<Guid>("LogID");

					b.Property<byte>("Status");

					b.Property<Guid>("UserID");

					b.HasKey("ID");

					b.HasIndex("LogID")
						.IsUnique();

					b.HasIndex("UserID");

					b.ToTable("Flights");

					b.HasData(
						new
						{
							ID = new Guid("11111111-1111-1111-1111-111111111111"),
							Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
							LogID = new Guid("11111111-1111-1111-1111-111111111111"),
							Status = (byte)1,
							UserID = new Guid("11111111-1111-1111-1111-111111111111")
						},
						new
						{
							ID = new Guid("11111111-0000-1111-1111-111111111111"),
							Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
							LogID = new Guid("11111111-0000-1111-1111-111111111111"),
							Status = (byte)2,
							UserID = new Guid("11111111-0000-1111-1111-111111111111")
						},
						new
						{
							ID = new Guid("11111111-0000-0000-1111-111111111111"),
							Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
							LogID = new Guid("11111111-0000-0000-1111-111111111111"),
							Status = (byte)0,
							UserID = new Guid("11111111-0000-1111-1111-111111111111")
						});
				});

			modelBuilder.Entity("Trial_Task_Model.Models.GPSLog", b =>
				{
					b.Property<Guid>("ID")
						.ValueGeneratedOnAdd();

					b.Property<TimeSpan>("Duration");

					b.Property<Guid>("LandingID");

					b.Property<Guid>("TakeoffID");

					b.HasKey("ID");

					b.HasIndex("LandingID");

					b.HasIndex("TakeoffID");

					b.ToTable("GPSLogs");

					b.HasData(
						new
						{
							ID = new Guid("11111111-0000-1111-1111-111111111111"),
							Duration = new TimeSpan(0, 1, 1, 1, 0),
							LandingID = new Guid("11111111-0000-1111-1111-111111111111"),
							TakeoffID = new Guid("11111111-0000-1111-1111-111111111111")
						},
						new
						{
							ID = new Guid("11111111-1111-1111-1111-111111111111"),
							Duration = new TimeSpan(0, 2, 2, 2, 0),
							LandingID = new Guid("11111111-1111-1111-1111-111111111111"),
							TakeoffID = new Guid("11111111-0000-1111-1111-111111111111")
						},
						new
						{
							ID = new Guid("11111111-0000-0000-1111-111111111111"),
							Duration = new TimeSpan(0, 1, 2, 3, 0),
							LandingID = new Guid("11111111-0000-1111-1111-111111111111"),
							TakeoffID = new Guid("11111111-1111-1111-1111-111111111111")
						});
				});

			modelBuilder.Entity("Trial_Task_Model.Models.GPSLogEntry", b =>
				{
					b.Property<Guid>("LogID");

					b.Property<DateTime>("Time");

					b.Property<double>("Latitude");

					b.Property<double>("Longitude");

					b.HasKey("LogID", "Time");

					b.ToTable("GPSLogEntries");

					b.HasData(
						new
						{
							LogID = new Guid("11111111-0000-1111-1111-111111111111"),
							Time = new DateTime(2019, 6, 18, 11, 44, 16, 412, DateTimeKind.Unspecified).AddTicks(5177),
							Latitude = 45.0,
							Longitude = 45.0
						},
						new
						{
							LogID = new Guid("11111111-0000-1111-1111-111111111111"),
							Time = new DateTime(2019, 6, 18, 11, 44, 16, 414, DateTimeKind.Unspecified).AddTicks(5738),
							Latitude = 46.0,
							Longitude = 45.0
						},
						new
						{
							LogID = new Guid("11111111-0000-1111-1111-111111111111"),
							Time = new DateTime(2019, 6, 18, 11, 44, 16, 414, DateTimeKind.Unspecified).AddTicks(6771),
							Latitude = 46.0,
							Longitude = 46.0
						},
						new
						{
							LogID = new Guid("11111111-0000-1111-1111-111111111111"),
							Time = new DateTime(2019, 6, 18, 11, 44, 16, 414, DateTimeKind.Unspecified).AddTicks(7783),
							Latitude = 45.0,
							Longitude = 46.0
						},
						new
						{
							LogID = new Guid("11111111-0000-1111-1111-111111111111"),
							Time = new DateTime(2019, 6, 18, 11, 44, 16, 414, DateTimeKind.Unspecified).AddTicks(8791),
							Latitude = 45.0,
							Longitude = 45.0
						},
						new
						{
							LogID = new Guid("11111111-1111-1111-1111-111111111111"),
							Time = new DateTime(2019, 6, 18, 11, 44, 16, 414, DateTimeKind.Unspecified).AddTicks(4801),
							Latitude = 44.0,
							Longitude = 44.0
						},
						new
						{
							LogID = new Guid("11111111-1111-1111-1111-111111111111"),
							Time = new DateTime(2019, 6, 18, 11, 44, 16, 414, DateTimeKind.Unspecified).AddTicks(5809),
							Latitude = 44.5,
							Longitude = 44.5
						},
						new
						{
							LogID = new Guid("11111111-1111-1111-1111-111111111111"),
							Time = new DateTime(2019, 6, 18, 11, 44, 16, 414, DateTimeKind.Unspecified).AddTicks(6817),
							Latitude = 45.0,
							Longitude = 45.0
						},
						new
						{
							LogID = new Guid("11111111-0000-0000-1111-111111111111"),
							Time = new DateTime(2019, 6, 18, 11, 44, 16, 414, DateTimeKind.Unspecified).AddTicks(4827),
							Latitude = 45.0,
							Longitude = 45.0
						},
						new
						{
							LogID = new Guid("11111111-0000-0000-1111-111111111111"),
							Time = new DateTime(2019, 6, 18, 11, 44, 16, 414, DateTimeKind.Unspecified).AddTicks(5836),
							Latitude = 44.5,
							Longitude = 44.5
						},
						new
						{
							LogID = new Guid("11111111-0000-0000-1111-111111111111"),
							Time = new DateTime(2019, 6, 18, 11, 44, 16, 414, DateTimeKind.Unspecified).AddTicks(6844),
							Latitude = 44.0,
							Longitude = 44.0
						});
				});

			modelBuilder.Entity("Trial_Task_Model.Models.User", b =>
				{
					b.Property<Guid>("Id")
						.ValueGeneratedOnAdd();

					b.Property<int>("AccessFailedCount");

					b.Property<string>("ConcurrencyStamp")
						.IsConcurrencyToken();

					b.Property<string>("Email")
						.HasMaxLength(256);

					b.Property<bool>("EmailConfirmed");

					b.Property<bool>("LockoutEnabled");

					b.Property<DateTimeOffset?>("LockoutEnd");

					b.Property<string>("NormalizedEmail")
						.HasMaxLength(256);

					b.Property<string>("NormalizedUserName")
						.HasMaxLength(256);

					b.Property<string>("PasswordHash");

					b.Property<string>("PhoneNumber");

					b.Property<bool>("PhoneNumberConfirmed");

					b.Property<string>("SecurityStamp");

					b.Property<bool>("TwoFactorEnabled");

					b.Property<string>("UserName")
						.HasMaxLength(256);

					b.HasKey("Id");

					b.HasIndex("NormalizedEmail")
						.HasName("EmailIndex");

					b.HasIndex("NormalizedUserName")
						.IsUnique()
						.HasName("UserNameIndex")
						.HasFilter("[NormalizedUserName] IS NOT NULL");

					b.ToTable("AspNetUsers");

					b.HasData(
						new
						{
							Id = new Guid("11111111-0000-1111-1111-111111111111"),
							AccessFailedCount = 0,
							ConcurrencyStamp = "1234123412341234",
							Email = "123@123.com",
							EmailConfirmed = true,
							LockoutEnabled = false,
							LockoutEnd = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
							NormalizedUserName = "user 1",
							PasswordHash = "1234",
							PhoneNumber = "123412345",
							PhoneNumberConfirmed = true,
							SecurityStamp = "1234123412341234",
							TwoFactorEnabled = false,
							UserName = "User1"
						},
						new
						{
							Id = new Guid("11111111-1111-1111-1111-111111111111"),
							AccessFailedCount = 0,
							ConcurrencyStamp = "12341234123412344",
							Email = "1234@123.com",
							EmailConfirmed = true,
							LockoutEnabled = false,
							LockoutEnd = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
							NormalizedUserName = "user 2",
							PasswordHash = "12344",
							PhoneNumber = "1234123454",
							PhoneNumberConfirmed = true,
							SecurityStamp = "12341234123412344",
							TwoFactorEnabled = false,
							UserName = "User2"
						});
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
				{
					b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>")
						.WithMany()
						.HasForeignKey("RoleId")
						.OnDelete(DeleteBehavior.Cascade);
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
				{
					b.HasOne("Trial_Task_Model.Models.User")
						.WithMany()
						.HasForeignKey("UserId")
						.OnDelete(DeleteBehavior.Cascade);
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
				{
					b.HasOne("Trial_Task_Model.Models.User")
						.WithMany()
						.HasForeignKey("UserId")
						.OnDelete(DeleteBehavior.Cascade);
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
				{
					b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>")
						.WithMany()
						.HasForeignKey("RoleId")
						.OnDelete(DeleteBehavior.Cascade);

					b.HasOne("Trial_Task_Model.Models.User")
						.WithMany()
						.HasForeignKey("UserId")
						.OnDelete(DeleteBehavior.Cascade);
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
				{
					b.HasOne("Trial_Task_Model.Models.User")
						.WithMany()
						.HasForeignKey("UserId")
						.OnDelete(DeleteBehavior.Cascade);
				});

			modelBuilder.Entity("Trial_Task_Model.Models.Flight", b =>
				{
					b.HasOne("Trial_Task_Model.Models.GPSLog", "Log")
						.WithOne("Flight")
						.HasForeignKey("Trial_Task_Model.Models.Flight", "LogID")
						.OnDelete(DeleteBehavior.Cascade);

					b.HasOne("Trial_Task_Model.Models.User", "Pilot")
						.WithMany("Flights")
						.HasForeignKey("UserID");
				});

			modelBuilder.Entity("Trial_Task_Model.Models.GPSLog", b =>
				{
					b.HasOne("Trial_Task_Model.Models.Airfield", "PlaceOfLanding")
						.WithMany("EndedAt")
						.HasForeignKey("LandingID");

					b.HasOne("Trial_Task_Model.Models.Airfield", "PlaceOfTakeoff")
						.WithMany("StartFrom")
						.HasForeignKey("TakeoffID");
				});

			modelBuilder.Entity("Trial_Task_Model.Models.GPSLogEntry", b =>
				{
					b.HasOne("Trial_Task_Model.Models.GPSLog", "Log")
						.WithMany("Entries")
						.HasForeignKey("LogID")
						.OnDelete(DeleteBehavior.Cascade);
				});
#pragma warning restore 612, 618
		}
	}
}
