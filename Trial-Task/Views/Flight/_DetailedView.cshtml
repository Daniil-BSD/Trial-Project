@model Trial_Task_BLL.DTOs.FlightDTO
@using Trial_Task_BLL.DTOs
@{
	Layout = "~/Views/Shared/_Layout.cshtml";
	IgnoreBody();
}
@section head{
	<link rel="stylesheet" href="https://cdn.rawgit.com/openlayers/openlayers.github.io/master/en/v5.3.0/css/ol.css" type="text/css">
	<style type="text/css">
	</style>
	<script src="https://cdn.rawgit.com/openlayers/openlayers.github.io/master/en/v5.3.0/build/ol.js"></script>
	<title>OpenLayers example</title>
}
@section script{
	<script type="text/javascript">
		window.onload = function () {
			var locations = @Model.Log.Entries.ToPathString()

			var altitudes = @Model.Log.Entries.ToAltitudeString(5);
			
			var maxAltitude_storrage = -1;
			var minAltitude_storrage = -1;

			var routeStyles_storrage = -1
			
			function max_altitude () {
				if (maxAltitude_storrage == -1) {
					maxAltitude_storrage = max(altitudes)
				}
				return maxAltitude_storrage
			}

			function max (array) {
				let ret = 0;
				for (i = 0; i < array.length; i++) {
					ret = Math.max(ret, array[i]);
				}
				return ret;
			}

			function min_altitude () {
				if (minAltitude_storrage == -1) {
					minAltitude_storrage = min(altitudes)
				}
				return minAltitude_storrage
			}

			function min (array) {
				let ret = max_altitude ();
				for (i = 0; i < array.length; i++) {
					ret = Math.min(ret, array[i]);
				}
				return ret;
			}

			function gradient(level) {
				level = level * 4
				internalIntercval = Math.floor((level) * 256) % 256
				stage = Math.floor(level)
				switch(stage){
					case 0:
						return [255, internalIntercval, 0, 1]
					case 1:
						return [255 - internalIntercval, 255, 0, 1]
					case 2:
						return [0, 255, internalIntercval, 1]
					case 3:
						return [0, 255 - internalIntercval, 255, 1]
					default:
						return [0, 0, 255, 1]
				}

			}

			var route = new ol.geom.LineString(locations).transform('EPSG:4326', 'EPSG:3857');

			var routeCoords = route.getCoordinates();
			var routeLength = routeCoords.length;
			
			var routeFeature = new ol.Feature({
				type: 'route',
				geometry: route
			});

			function stylesforRoute() {
				if (routeStyles_storrage == -1) {
					let geometry = route
					let styles = []

					let i = 0,
						color = '#FE2EF7', //pink. should not be displayed
						previousColor = '#FE2EF7',
						lineString,
						lastCoordinate = geometry.getLastCoordinate();

					geometry.forEachSegment((start, end) => {

						//let c = ((altitudes[i] / 25) % 50) * 5
						//color = [c, c, 255 - c];
						color = gradient((altitudes[i] - min_altitude () ) / (max_altitude() - min_altitude ()))
						//First segment
						if (lineString == null) {
							lineString = new ol.geom.LineString([start, end]);
						} else {

							//Color changes: push the current segment and start a new one
							if (color !== previousColor) {

								styles.push(new ol.style.Style({
									geometry: lineString,
									fill: new ol.style.Fill({
										color: previousColor
									}),
									stroke: new ol.style.Stroke({
										color: previousColor,
										width: 2
									})
								}));

								lineString = new ol.geom.LineString([start, end]);

							} else {
								//Color is same: continue the current segment
								lineString.appendCoordinate(end);
							}

							//Last segment
							if (end[0] === lastCoordinate[0] && end[1] === lastCoordinate[1]) {
								styles.push(new ol.style.Style({
									geometry: lineString,
									stroke: new ol.style.Stroke({
										color: color,
										width: 5
									})
								}));
							}
						}

						previousColor = color;
						i++;
					})
					routeStyles_storrage = styles;
				}
				return routeStyles_storrage;
		}


			var geoMarker = new ol.Feature({
				type: 'geoMarker',
				geometry: new ol.geom.Point(routeCoords[0])
			});
			var startMarker = new ol.Feature({
				type: 'startIcon',
				geometry: new ol.geom.Point(routeCoords[0])
			});
			var endMarker = new ol.Feature({
				type: 'endIcon',
				geometry: new ol.geom.Point(routeCoords[routeLength - 1])
			});

			var styles = {
				'route': stylesforRoute(),
				'startIcon': new ol.style.Style({
					image: new ol.style.Icon({
						anchor: [0.5, 1],
						src: 'https://img.icons8.com/ios/50/000000/airplane-take-off-filled.png',
						scale: 0.5
					})
				}),
				'endIcon': new ol.style.Style({
					image: new ol.style.Icon({
						anchor: [0.5, 1],
						src: 'https://img.icons8.com/ios/50/000000/airplane-landing-filled.png',
						scale: 0.5
					})
				}),
				'geoMarker': new ol.style.Style({
					image: new ol.style.Circle({
						radius: 7,
						snapToPixel: false,
						fill: new ol.style.Fill({
							color: 'black'
						}),
						stroke: new ol.style.Stroke({
							color: 'white',
							width: 2
						})
					})
				})
			};

			var animating = false;
			var speed, now;
			var startButton = document.getElementById('start-animation');

			var vectorLayer = new ol.layer.Vector({
				source: new ol.source.Vector({
					features: [routeFeature, geoMarker, startMarker, endMarker]
				}),
				style: function (feature) {
					// hide geoMarker if animation is active
					if (animating && feature.get('type') === 'geoMarker') {
						return null;
					}
					return styles[feature.get('type')];
				}
			});

			var map = new ol.Map({
				target: document.getElementById('map'),
				loadTilesWhileAnimating: true,
				view: new ol.View(),
				layers: [
					new ol.layer.Tile({
						source: new ol.source.OSM()
					}),
					vectorLayer
				]
			});
			map.getView().fit(
				vectorLayer.getSource().getExtent(), map.getSize(),
				{ padding: [30, 5, 5, 5] });
			var center = map.getView().getCenter();

			var moveFeature = function (event) {
				var vectorContext = event.vectorContext;
				var frameState = event.frameState;

				if (animating) {
					var elapsedTime = frameState.time - now;
					// here the trick to increase speed is to jump some indexes
					// on lineString coordinates
					var index = Math.round(speed * elapsedTime / 1000);

					if (index >= routeLength) {
						stopAnimation(true);
						return;
					}

					var currentPoint = new ol.geom.Point(routeCoords[index]);
					var feature = new ol.Feature(currentPoint);
					vectorContext.drawFeature(feature, styles.geoMarker);
				}
				// tell OL3 to continue the postcompose animation
				map.render();
			};

			function startAnimation() {
				if (animating) {
					stopAnimation(false);
				} else {
					animating = true;
					now = new Date().getTime();
					speed = 20;
					startButton.textContent = 'Cancel Animation';
					// hide geoMarker
					geoMarker.setStyle(null);
					// just in case you pan somewhere else
					map.on('postcompose', moveFeature);
					map.render();
				}
			}


			function stopAnimation(ended) {
				animating = false;
				startButton.textContent = 'Start Animation';

				// if animation cancelled set the marker at the beginning
				var coord = ended ? routeCoords[routeLength - 1] : routeCoords[0];
				(geoMarker.getGeometry())
					.setCoordinates(coord);
				//remove listener
				map.un('postcompose', moveFeature);
			}

			startButton.addEventListener('click', startAnimation, false);

		}
	</script>
}
<div class="row row-eq-height">
	<div class="col-sm-auto align-self-center">
		<table class="table">
			@if (IsSectionDefined("aboveTable"))
			{
				@RenderSection("aboveTable")
			}
			<tbody>
				@if (IsSectionDefined("tableTop"))
				{
					@RenderSection("tableTop")
				}
				<tr>
					<th scope="row">Name</th>
					<td>@Model.Pilot.UserName</td>
				</tr>
				<tr>
					<th scope="row">Date</th>
					<td>@Model.Date.ToShortDateString()</td>
				</tr>
				<tr>
					<th scope="row">Duration</th>
					<td>@Model.Log.Duration</td>
				</tr>
				<tr>
					<th scope="row">From</th>
					<td>
						@if (Model.Log.PlaceOfTakeoff != null)
						{
							@Model.Log.PlaceOfTakeoff.Name
						} else
						{
							<span class="text-muted">Unidentified</span>
						}
					</td>
				</tr>
				<tr>
					<th scope="row">To</th>
					<td>
						@if (Model.Log.PlaceOfLanding != null)
						{
							@Model.Log.PlaceOfLanding.Name
						} else
						{
							<span class="text-muted">Outlanding</span>
						}
					</td>
				</tr>
				@if (IsSectionDefined("tableBottom"))
				{
					@RenderSection("tableBottom")
				}
			</tbody>
		</table>
		@if (IsSectionDefined("belowTable"))
		{
			@RenderSection("belowTable")
		}
	</div>
	<div class="col-sm" id="map-container" style="
	padding-right: 0;
	padding-left: 0;
	border-radius: .25rem;
	min-height: 30rem;
	">
		<div id="map" class="map rounded" style=" position: absolute; height: 100%; width: 100%; "></div>
		<button id="start-animation" class="btn btn-light" style="
		position: absolute;
		bottom: .25rem;
		left: .25rem;
	">
			Start Animation
		</button>
	</div>
</div>